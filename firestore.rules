/**
 * @fileoverview Firestore Security Rules for WebGenius application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles, website projects, and prompt histories.
 * Templates are publicly accessible.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. This is the root for all user-owned data.
 * - /users/{userId}/websiteProjects/{websiteProjectId}: Stores website projects created by the user.
 * - /users/{userId}/websiteProjects/{websiteProjectId}/promptHistories/{promptHistoryId}: Stores the history of prompts for each website project.
 * - /templates/{templateId}: Stores website templates available for all users.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data, website projects, and prompt histories.
 * - Templates are publicly readable.
 * - Listing operations are restricted to owners for user-specific data.
 *
 * Denormalization for Authorization:
 *  Authorization context is derived from the path. No denormalization is explicitly needed as this approach promotes Authorization Independence.
 *
 * Structural Segregation:
 * Private user data is stored under /users/{userId}, while public templates are stored in a top-level collection (/templates/{templateId}).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     * @allow (get, update, delete) User with ID 'user123' can read, update, and delete their own profile.
     * @deny (get, update, delete) User with ID 'user456' cannot read, update, or delete the profile of 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Users collection not listable.
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to website projects for a specific user.
     * @path /users/{userId}/websiteProjects/{websiteProjectId}
     * @allow (create) User with ID 'user123' can create a project under their profile.
     * @deny (create) User with ID 'user456' cannot create a project under 'user123' profile.
     * @allow (get, list, update, delete) User with ID 'user123' can read, list, update, and delete their own projects.
     * @deny (get, list, update, or delete projects under 'user123' profile.
     * @principle Enforces path-based ownership for website projects.
     */
    match /users/{userId}/websiteProjects/{websiteProjectId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to prompt histories for a specific website project.
     * @path /users/{userId}/websiteProjects/{websiteProjectId}/promptHistories/{promptHistoryId}
     * @allow (create) User with ID 'user123' can create prompt history under their project.
     * @deny (create) User with ID 'user456' cannot create prompt history under 'user123' project.
     * @allow (get, list, update, delete) User with ID 'user123' can read, list, update, and delete their own prompt histories.
     * @deny (get, list, update, or delete prompt histories under 'user123' project.
     * @principle Enforces path-based ownership for prompt histories.
     */
    match /users/{userId}/websiteProjects/{websiteProjectId}/promptHistories/{promptHistoryId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to website templates.
     * @path /templates/{templateId}
     * @allow (get, list) Any user can read or list templates.
     * @deny (create, update, delete) No user can create, update, or delete templates.
     * @principle Templates are publicly readable but not writable.
     */
    match /templates/{templateId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}